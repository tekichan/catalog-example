{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","PRIM_COLORS","pink","indigo","teal","amber","SECO_COLORS","red","blue","green","yellow","COLOR_IDX","Math","floor","random","length","SELECTED_THEME","createMuiTheme","primary","secondary","lorem","LoremIpsum","sentencesPerParagraph","max","min","wordsPerSentence","PRODUCT_ITEMS","map","id","thumbnail","header","generateWords","content","generateSentences","FOOTER","SUB_FOOTER","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","DetailDialog","props","classes","open","onClose","Dialog","_event","aria-labelledby","DialogTitle","Card","className","CardMedia","image","title","CardContent","App","React","useState","isDialogOpen","setDialogOpen","selectedThumbnail","setSelectedThumbnail","selectedHeader","setSelectedHeader","selectedContent","setSelectedContent","mainCount","setMainCount","nextCount","setNextCount","Fragment","ThemeProvider","CssBaseline","AppBar","position","Toolbar","noWrap","Container","maxWidth","component","gutterBottom","paragraph","Grid","container","justify","item","Badge","badgeContent","Button","onClick","key","xs","sm","md","CardActions","size","navigator","share","text","url","document","location","then","console","log","catch","error","alert","window","reload","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f6343b85.chunk.js","sourcesContent":["import React from 'react';\n\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport FindInPageIcon from '@material-ui/icons/FindInPage';\nimport ShareIcon from '@material-ui/icons/Share';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Badge from '@material-ui/core/Badge';\n\nimport { makeStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\nimport indigo from '@material-ui/core/colors/indigo';\nimport blue from '@material-ui/core/colors/blue';\nimport teal from '@material-ui/core/colors/teal';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport yellow from '@material-ui/core/colors/yellow';\n\nimport { LoremIpsum } from \"lorem-ipsum\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst PRIM_COLORS = [pink, indigo, teal, amber];\nconst SECO_COLORS = [red, blue, green, yellow];\nconst COLOR_IDX = Math.floor(Math.random() * PRIM_COLORS.length);\n\nconst SELECTED_THEME = createMuiTheme({\n  palette: {\n    primary: PRIM_COLORS[COLOR_IDX],\n    secondary: SECO_COLORS[COLOR_IDX],\n  },\n});\n\nconst lorem = new LoremIpsum({\n  sentencesPerParagraph: {\n    max: 8,\n    min: 4\n  },\n  wordsPerSentence: {\n    max: 16,\n    min: 4\n  }\n});\n\nconst PAGE_TITLE = 'Product Catalog';\nconst PAGE_CONTENT = 'This is an example how React JS renders a catalog webpage.' + \n                    ' All contents are random for display only.' \nconst CARDS = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst PRODUCT_ITEMS = CARDS.map((card) => {\n  return {\n    id: card\n    , thumbnail: 'https://source.unsplash.com/random?sig='+ card\n    , header: lorem.generateWords(5)\n    , content: lorem.generateSentences(2)\n  }\n});\nconst FOOTER = lorem.generateWords(5);\nconst SUB_FOOTER = lorem.generateSentences(2);\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://github.com/tekichan\">\n        Teki Chan\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nfunction DetailDialog(props) {\n  const classes = useStyles();\n  const { open, onClose, thumbnail, header, content } = props;\n  const handleClose = (_event) => { onClose(_event); }\n  return (\n<Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n  <DialogTitle id=\"simple-dialog-title\">{header}</DialogTitle>\n  <Card className={classes.card}>\n    <CardMedia className={classes.cardMedia} image={thumbnail} title={header} />\n    <CardContent className={classes.cardContent}>\n      <Typography>{content}</Typography>\n    </CardContent>\n  </Card>\n</Dialog>\n  );\n}\n\nexport default function App() {\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  const [selectedThumbnail, setSelectedThumbnail] = React.useState('');\n  const [selectedHeader, setSelectedHeader] = React.useState('');\n  const [selectedContent, setSelectedContent] = React.useState('');\n  const [mainCount, setMainCount] = React.useState(0);\n  const [nextCount, setNextCount] = React.useState(0);\n\n  const handleOpenDialog = (thumbnail, header, content) => {\n    setSelectedThumbnail(thumbnail);\n    setSelectedHeader(header);\n    setSelectedContent(content);\n    setDialogOpen(true);\n  };\n\n  const handleShareButton = (header, content) => {\n    if (navigator.share) {\n      navigator\n        .share({\n          title: header,\n          text: content,\n          url: document.location.href,\n        })\n        .then(() => {\n          console.log('Successfully shared');\n        })\n        .catch(error => {\n          alert('Something went wrong sharing the blog', error);\n          window.location.reload(); // now share works again\n        });\n    } else {\n      alert('navigator.share is not supported.');\n    }\n    return false;    \n  }\n    \n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={SELECTED_THEME}>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <ShoppingCartIcon className={classes.icon} />\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            {PAGE_TITLE}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              {PAGE_TITLE}\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              {PAGE_CONTENT}\n            </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Badge badgeContent={mainCount} color=\"secondary\"><Button variant=\"contained\" color=\"primary\" onClick={(_event) => { setMainCount(mainCount + 1); }}>\n                    Main call to action\n                  </Button></Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={nextCount} color=\"primary\"><Button variant=\"outlined\" color=\"primary\" onClick={(_event) => { setNextCount(nextCount + 1); }}>\n                    Secondary action\n                  </Button></Badge>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {PRODUCT_ITEMS.map((item) => (\n              <Grid item key={item.id} xs={12} sm={6} md={4}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image={item.thumbnail}\n                    title={item.header}\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      {item.header}\n                    </Typography>\n                    <Typography>\n                      {item.content}\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\" onClick={ (_event) => handleOpenDialog(item.thumbnail, item.header, item.content) }>\n                      <FindInPageIcon className={classes.icon} />Detail\n                    </Button>\n                    <Button size=\"small\" color=\"primary\" onClick={ (_event) => handleShareButton(item.header, item.content) }>\n                      <ShareIcon className={classes.icon} />Share\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            ))}\n            <DetailDialog thumbnail={selectedThumbnail} \n                          header={selectedHeader}  \n                          content={selectedContent}\n                          open={isDialogOpen}\n                          onClose={ (_event) => { setDialogOpen(false);} } />\n          </Grid>\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          {FOOTER}\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          {SUB_FOOTER}\n        </Typography>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}